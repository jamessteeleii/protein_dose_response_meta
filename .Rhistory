steele_data$CON_pre_sd <- ifelse(is.na(steele_data$CON_pre_se), steele_data$CON_pre_sd, steele_data$CON_pre_se * sqrt(steele_data$CON_n))
steele_data$RT_post_sd <- ifelse(is.na(steele_data$RT_post_se), steele_data$RT_post_sd, steele_data$RT_post_se * sqrt(steele_data$RT_n))
steele_data$CON_post_sd <- ifelse(is.na(steele_data$CON_post_se), steele_data$CON_post_sd, steele_data$CON_post_se * sqrt(steele_data$CON_n))
# convert p to t (Change scores)
steele_data$RT_delta_t_value <- replmiss(steele_data$RT_delta_t_value, with(steele_data, qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE)))
steele_data$CON_delta_t_value <- replmiss(steele_data$CON_delta_t_value, with(steele_data, qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE)))
# convert t to SE (Change scores)
steele_data$RT_delta_se <- replmiss(steele_data$RT_delta_se, with(steele_data, ifelse(is.na(RT_delta_m),
(RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value)))
steele_data$CON_delta_se <- replmiss(steele_data$CON_delta_se, with(steele_data, ifelse(is.na(CON_delta_m),
(CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value)))
# make positive
steele_data$RT_delta_se <- ifelse(steele_data$RT_delta_se < 0, steele_data$RT_delta_se * -1, steele_data$RT_delta_se)
steele_data$CON_delta_se <- ifelse(steele_data$CON_delta_se < 0, steele_data$CON_delta_se * -1, steele_data$CON_delta_se)
# convert CI to SE (Change scores)
steele_data$RT_delta_se <- replmiss(steele_data$RT_delta_se, with(steele_data, (RT_delta_CI_upper - RT_delta_CI_lower)/3.92))
steele_data$CON_delta_se <- replmiss(steele_data$CON_delta_se, with(steele_data, (CON_delta_CI_upper - CON_delta_CI_lower)/3.92))
# convert SE to SD (Change scores)
steele_data$RT_delta_sd <- replmiss(steele_data$RT_delta_sd, with(steele_data, RT_delta_se * sqrt(RT_n)))
steele_data$CON_delta_sd <- replmiss(steele_data$CON_delta_sd, with(steele_data, CON_delta_se * sqrt(CON_n)))
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
steele_data$RT_ri <- (steele_data$RT_pre_sd^2 + steele_data$RT_post_sd^2 - steele_data$RT_delta_sd^2)/(2 * steele_data$RT_pre_sd * steele_data$RT_post_sd)
steele_data$CON_ri <- (steele_data$CON_pre_sd^2 + steele_data$CON_post_sd^2 - steele_data$CON_delta_sd^2)/(2 * steele_data$CON_pre_sd * steele_data$CON_post_sd)
steele_data <- escalc(measure = "ZCOR", ri = RT_ri, ni = RT_n, data = steele_data)
steele_data <- read_csv(url("https://github.com/jamessteeleii/Meta-Analysis-of-Variation-in-Resistance-Training/raw/refs/heads/main/data/Polito%20et%20al.%20RT%20Extracted%20Data.csv"))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = ifelse(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = ifelse(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = ifelse(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = ifelse(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = replmiss(RT_delta_t_value, with(steele_data, qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE))),
CON_delta_t_value = replmiss(CON_delta_t_value, with(steele_data, qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE))),
# convert t to SE (Change scores)
RT_delta_se = replmiss(RT_delta_se, with(steele_data, ifelse(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value))),
CON_delta_se = replmiss(CON_delta_se, with(steele_data, ifelse(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value))),
# make positive
RT_delta_se = ifelse(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = ifelse(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = replmiss(RT_delta_se, with(steele_data, (RT_delta_CI_upper - RT_delta_CI_lower)/3.92)),
CON_delta_se = replmiss(CON_delta_se, with(steele_data, (CON_delta_CI_upper - CON_delta_CI_lower)/3.92)),
# convert SE to SD (Change scores)
RT_delta_sd = replmiss(RT_delta_sd, with(steele_data, RT_delta_se * sqrt(RT_n))),
CON_delta_sd = replmiss(CON_delta_sd, with(steele_data, CON_delta_se * sqrt(CON_n))),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = ifelse(between(int_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = ifelse(between(con_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
View(steele_data)
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE)),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE)),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value)),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value)),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n)),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqCON(CON_n)),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(int_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = if_else(between(con_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
library(tidyverse)
library(metafor)
library(emmeans)
library(mgcv)
library(patchwork)
library(splines)
library(lspline)
library(rstan)
library(brms)
steele_data <- read_csv(url("https://github.com/jamessteeleii/Meta-Analysis-of-Variation-in-Resistance-Training/raw/refs/heads/main/data/Polito%20et%20al.%20RT%20Extracted%20Data.csv"))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE)),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE)),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value)),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value)),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n)),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqCON(CON_n)),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(int_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = if_else(between(con_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE), RT_delta_t_value),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE), CON_delta_t_value),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value), RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value), CON_delta_se),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92, RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92, CON_delta_se),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n), RT_delta_sd),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqCON(CON_n), CON_delta_sd),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(int_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = if_else(between(con_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE), RT_delta_t_value),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE), CON_delta_t_value),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value), RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value), CON_delta_se),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92, RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92, CON_delta_se),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n), RT_delta_sd),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqrt(CON_n), CON_delta_sd),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(int_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = if_else(between(con_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE), RT_delta_t_value),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE), CON_delta_t_value),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value), RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value), CON_delta_se),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92, RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92, CON_delta_se),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n), RT_delta_sd),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqrt(CON_n), CON_delta_sd),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(R_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = if_else(between(CON_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE), RT_delta_t_value),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE), CON_delta_t_value),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value), RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value), CON_delta_se),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92, RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92, CON_delta_se),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n), RT_delta_sd),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqrt(CON_n), CON_delta_sd),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(RT_ri,-1,1) == FALSE, NA, int_ri),
CON_ri = if_else(between(CON_ri,-1,1) == FALSE, NA, con_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
steele_data <- steele_data |>
mutate(
# calculate pre-post SDs from SEs
RT_pre_sd = if_else(is.na(RT_pre_se), RT_pre_sd, RT_pre_se * sqrt(RT_n)),
CON_pre_sd = if_else(is.na(CON_pre_se), CON_pre_sd, CON_pre_se * sqrt(CON_n)),
RT_post_sd = if_else(is.na(RT_post_se), RT_post_sd, RT_post_se * sqrt(RT_n)),
CON_post_sd = if_else(is.na(CON_post_se), CON_post_sd, CON_post_se * sqrt(CON_n)),
# convert p to t (Change scores)
RT_delta_t_value = if_else(is.na(RT_delta_t_value), qt(RT_delta_p_value/2, df=RT_n-1, lower.tail=FALSE), RT_delta_t_value),
CON_delta_t_value = if_else(is.na(CON_delta_t_value), qt(CON_delta_p_value/2, df=CON_n-1, lower.tail=FALSE), CON_delta_t_value),
# convert t to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), if_else(is.na(RT_delta_m), (RT_post_m - RT_pre_m)/RT_delta_t_value, RT_delta_m/RT_delta_t_value), RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), if_else(is.na(CON_delta_m), (CON_post_m - CON_pre_m)/CON_delta_t_value, CON_delta_m/CON_delta_t_value), CON_delta_se),
# make positive
RT_delta_se = if_else(RT_delta_se < 0, RT_delta_se * -1, RT_delta_se),
CON_delta_se = if_else(CON_delta_se < 0, CON_delta_se * -1, CON_delta_se),
# convert CI to SE (Change scores)
RT_delta_se = if_else(is.na(RT_delta_se), (RT_delta_CI_upper - RT_delta_CI_lower)/3.92, RT_delta_se),
CON_delta_se = if_else(is.na(CON_delta_se), (CON_delta_CI_upper - CON_delta_CI_lower)/3.92, CON_delta_se),
# convert SE to SD (Change scores)
RT_delta_sd = if_else(is.na(RT_delta_sd), RT_delta_se * sqrt(RT_n), RT_delta_sd),
CON_delta_sd = if_else(is.na(CON_delta_sd), CON_delta_se * sqrt(CON_n), CON_delta_sd),
# calculate pre-post correlation coefficient for those with pre, post, and delta SDs
RT_ri = (RT_pre_sd^2 + RT_post_sd^2 - RT_delta_sd^2)/(2 * RT_pre_sd * RT_post_sd),
CON_ri = (CON_pre_sd^2 + CON_post_sd^2 - CON_delta_sd^2)/(2 * CON_pre_sd * CON_post_sd)
) |>
mutate(
# Remove values outside the range of -1 to +1 as they are likely due to misreporting or miscalculations in original studies
RT_ri = if_else(between(RT_ri,-1,1) == FALSE, NA, RT_ri),
CON_ri = if_else(between(CON_ri,-1,1) == FALSE, NA, CON_ri)
) |>
mutate(pre_sd_pool = sqrt(((RT_n - 1) * RT_pre_sd ^ 2 +
(CON_n - 1) * CON_pre_sd ^ 2) /  (RT_n + CON_n - 2)))
View(steele_data)
steele_data <- escalc(measure = "ZCOR", ri = RT_ri, ni = RT_n, data = steele_data)
meta_RT_ri <- rma.mv(yi, V=vi, data=steele_data,
random = list(~ 1 | study, ~1 | arm, ~1 | es), method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
rob_meta_RT_ri <- robust(meta_RT_ri, steele_data$study)
z2r_RT <- psych::fisherz2r(rob_meta_RT_ri$b[1])
steele_data$RT_ri <- if_else(is.na(steele_data$RT_ri), z2r_RT, steele_data$RT_ri)
steele_data_CON <- steele_data |>
group_by(study) |>
slice_head()
data_CON <- escalc(measure = "ZCOR", ri = CON_ri, ni = CON_n, data = steele_data_CON)
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | id, ~1 | arm, ~1 | effect), method="REML", test="t",
CONtrol=list(optimizer="optim", optmethod="Nelder-Mead"))
View(steele_data)
steele_data_CON <- steele_data |>
group_by(study, outcome, measure, region, specific_region) |>
slice_head()
data_CON <- escalc(measure = "ZCOR", ri = CON_ri, ni = CON_n, data = steele_data_CON)
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | id, ~1 | arm, ~1 | effect), method="REML", test="t",
CONtrol=list(optimizer="optim", optmethod="Nelder-Mead"))
steele_data_CON <- escalc(measure = "ZCOR", ri = CON_ri, ni = CON_n, data = steele_data_CON)
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | id, ~1 | arm, ~1 | effect), method="REML", test="t",
CONtrol=list(optimizer="optim", optmethod="Nelder-Mead"))
View(steele_data_CON)
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | id, ~1 | arm, ~1 | es), method="REML", test="t",
CONtrol=list(optimizer="optim", optmethod="Nelder-Mead"))
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | study, ~1 | arm, ~1 | es), method="REML", test="t",
CONtrol=list(optimizer="optim", optmethod="Nelder-Mead"))
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | study, ~1 | arm, ~1 | es), method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
View(steele_data_CON)
steele_data_CON <- steele_data |>
select(study, arm, es, CON_ri, CON_n) |>
distinct()
View(steele_data_CON)
steele_data_CON <- escalc(measure = "ZCOR", ri = CON_ri, ni = CON_n, data = steele_data_CON)
meta_CON_ri <- rma.mv(yi, V=vi, data=steele_data_CON,
random = list(~ 1 | study, ~1 | arm, ~1 | es), method="REML", test="t",
control=list(optimizer="optim", optmethod="Nelder-Mead"))
rob_meta_CON_ri <- robust(meta_CON_ri, steele_data_CON$study)
z2r_CON <- psych::fisherz2r(rob_meta_CON_ri$b[1])
View(steele_data)
steele_data_CON$CON_ri <- if_else(is.na(data$CON_ri), z2r_CON, steele_data_CON$CON_ri)
steele_data_CON$CON_ri <- if_else(is.na(steele_data_CON$CON_ri), z2r_CON, steele_data_CON$CON_ri)
steele_data$CON_ri <- if_else(is.na(steele_data$CON_ri), z2r_CON, steele_data$CON_ri)
View(steele_data)
hist(steele_data$RT_ri)
hist(steele_data_CON$CON_ri)
steele_data <- steele_data |>
select(-yi, -vi) |>
pivot_longer(
cols = contains(c("RT_", "CON_")),
names_to = "what",
values_to = "value"
) |>
separate("what", into = c("condition", "what"), sep = "_", extra = "merge") |>
pivot_wider(names_from = "what",
values_from = "value")
steele_data <- steele_data |>
select(-yi, -vi, RT_only) |>
pivot_longer(
cols = contains(c("RT_", "CON_")),
names_to = "what",
values_to = "value"
) |>
separate("what", into = c("condition", "what"), sep = "_", extra = "merge") |>
pivot_wider(names_from = "what",
values_from = "value")
steele_data <- steele_data |>
select(-yi, -vi, -RT_only) |>
pivot_longer(
cols = contains(c("RT_", "CON_")),
names_to = "what",
values_to = "value"
) |>
separate("what", into = c("condition", "what"), sep = "_", extra = "merge") |>
pivot_wider(names_from = "what",
values_from = "value")
# calculate for pre-post and delta separately
steele_data_pre_post <- steele_data |>
filter(!is.na(post_m))
View(steele_data_pre_post)
steele_data_pre_post <- escalc(
measure = "SMCR",
m1i = post_m,
m2i = pre_m,
sd1i = pre_sd_pool,
# sd2i = pre_sd,
ni = n,
ri = ri,
data = steele_data_pre_post
)
steele_data_joined_delta <- steele_data |>
filter(is.na(post_m)) |>
mutate(ref = 0)
data_joined_delta <- escalc(
measure = "SMCR",
m1i = delta_m,
m2i = ref,
sd1i = pre_sd_pool,
# sd2i = pre_sd,
ni = n,
ri = ri,
data = steele_data_joined_delta
)
View(steele_data_pre_post)
steele_data_joined <- bind_rows(steele_data_pre_post, steele_data_joined_delta)
View(steele_data_joined)
steele_data <- bind_rows(steele_data_RT, steele_data_CON) |>
filter(outcome == "hypertrophy") |>
unite("arm", c(outcome,study,arm,condition), sep = "_", remove = FALSE) |>
mutate(arm = dense_rank(arm)) |>
rowid_to_column("effect")
steele_data_joined <- bind_rows(steele_data_pre_post, steele_data_joined_delta) |>
filter(outcome == "hypertrophy") |>
unite("arm", c(outcome,study,arm,condition), sep = "_", remove = FALSE) |>
mutate(arm = dense_rank(arm)) |>
rowid_to_column("effect")
# frequentist meta-analysis estimates
steele_meta <- rma.mv(yi, vi,
random = list(~ 1 | study, ~1 | arm, ~1 | effect),
mods = ~ condition,
data = steele_data_joined,
method="REML", test="t",
# control=list(optimizer="optim", optmethod="Nelder-Mead")
)
steele_meta
rob_steele_meta <- robust(steele_meta, cluster = steele_data_joined$study, clubSandwich = TRUE)
rob_steele_meta
steele_data_joined |> ggplot(aes(x=yi, y = condition)) +
geom_histogram()
steele_data_joined |> ggplot(aes(x=yi, y = condition)) + geom_density()
steele_data_joined |> ggplot(aes(x=yi, y = condition)) + geom_point(position = position_jitter())
steele_data_joined <- bind_rows(steele_data_pre_post, steele_data_joined_delta) |>
filter(outcome == "hypertrophy") |>
unite("arm", c(outcome,study,arm,condition), sep = "_", remove = FALSE) |>
mutate(arm = dense_rank(arm)) |>
rowid_to_column("effect") |>
mutate(condition_code = case_when(
condition == "RT" ~ 0,
condition == "CON" ~ 1,
))
# frequentist meta-analysis estimates
steele_meta <- rma.mv(yi, vi,
random = list(~ 1 | study, ~1 | arm, ~1 | effect),
mods = ~ condition,
data = steele_data_joined,
method="REML", test="t",
# control=list(optimizer="optim", optmethod="Nelder-Mead")
)
rob_steele_meta <- robust(steele_meta, cluster = steele_data_joined$study, clubSandwich = TRUE)
rob_steele_meta
steele_meta
# frequentist meta-analysis estimates
steele_meta <- rma.mv(yi, vi,
random = list(~ 1 | study, ~1 | arm, ~1 | effect),
mods = ~ condition_code,
data = steele_data_joined,
method="REML", test="t",
# control=list(optimizer="optim", optmethod="Nelder-Mead")
)
rob_steele_meta <- robust(steele_meta, cluster = steele_data_joined$study, clubSandwich = TRUE)
rob_steele_meta
priors <-
c(
# # We set priors based on the overall estimates for both control and RT conditions in an arm based model using Steele et al. data
set_prior(paste("student_t(3,", rob_steele_meta$b[1],",", rob_steele_meta$se[1],")"), class = "b", coef = "Intercept"),
set_prior(paste("student_t(3,", rob_steele_meta$b[2],",", rob_steele_meta$se[2],")"), class = "b", coef = "resistance_exercise_code"),
# All other b parameters are kept as uninformative but weakly regularising
set_prior("student_t(3,0,10)", class = "b")
# All other priors for variance parameters are kept as default weakly regularising
)
priors
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
install.packages("here")
targets::tar_make()
install.packages("qs2")
install.packages("progressr")
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_visnetwork()
targets::tar_make()
targets::tar_make()
benito_data <-     read_csv(url("https://github.com/jamessteeleii/glp1_rt_cits/raw/refs/heads/master/data/benito_study_data.csv"))
library(tidyverse)
library(metafor)
library(emmeans)
library(mgcv)
library(patchwork)
library(splines)
library(lspline)
library(rstan)
library(brms)
benito_data <-     read_csv(url("https://github.com/jamessteeleii/glp1_rt_cits/raw/refs/heads/master/data/benito_study_data.csv"))
View(benito_data)
download.file("https://openpowerlifting.gitlab.io/opl-csv/files/openpowerlifting-latest.zip", destfile = "data")
download.file("https://openpowerlifting.gitlab.io/opl-csv/files/openpowerlifting-latest.zip", destfile = "open_powerlifting_data")
# Create a directory to extract files
dir_create("data/open_powerlifting_data")
